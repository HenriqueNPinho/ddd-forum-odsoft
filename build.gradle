plugins {
    id "com.github.node-gradle.node" version "7.0.0"
}

def isWindows = System.properties['os.name'].toLowerCase().contains('windows')
def npmCommand = isWindows ? 'npm.cmd' : 'npm'

// ****************************** Build ******************************
task install_dependencies(type: Exec) {
    commandLine npmCommand, 'install'
}

task delete_dist(type: Delete) {
    delete 'dist'
}

task transpile_project(type: Exec) {
    commandLine 'node', 'node_modules/typescript/bin/tsc', '-p', '.'
}

task run_build(type: DefaultTask) {
    dependsOn delete_dist, transpile_project
}

// *************************** Docker Setup ***************************
task copyEnv(type: Copy) {
    from './.env.template'
    into '.'
    include '.*'
    rename { fileName ->
        fileName.replace('.env.template', '.env')
    }
}

task compose(type: Exec) {
    commandLine 'docker-compose', 'up'
}

// *************************** Backend Setup ***************************
task delete_db(type: Exec) {
    commandLine npmCommand, 'run', 'db:delete:dev'
}

task create_db(type: Exec) {
    commandLine npmCommand, 'run', 'db:create:dev'
}

task migrate(type: Exec) {
    commandLine npmCommand, 'run', 'migrate:dev'
}

task set_db(type: DefaultTask) {
    dependsOn create_db, migrate
}

task run_backend(type: Exec) {
    commandLine npmCommand, 'run', 'start:dev'
}

// **************************** Test Setup *****************************
// Refresh the test database
task refresh_database(type: Exec){
    dependsOn delete_db
    commandLine npmCommand, 'run', 'db:create:dev'
}
// Migrate new database for testing
task api_test_set(type: Exec) {
    dependsOn refresh_database
    commandLine npmCommand, 'run', 'migrate:dev'
}

// **************************** Test Runs *****************************
// Run unit tests
task run_unit_test(type: Exec) {
    commandLine npmCommand, 'run', 'test', '--', '--testPathIgnorePatterns=api'
}
// Run unit tests with coverage
task run_unit_test_coverage(type: Exec) {
    commandLine npmCommand, 'run', 'testWithCoverage', '--', '--testPathIgnorePatterns=api'
}
// Run api tests
task run_api_test(type: Exec) {
    dependsOn api_test_set
    commandLine 'npm.cmd', 'run', 'test', '--', '--testPathPattern=api'
}
// Run api tests with coverage
task run_api_test_coverage(type: Exec) {
    dependsOn api_test_set
    commandLine npmCommand, 'run', 'testWithCoverage', '--', '--testPathPattern=api'
}